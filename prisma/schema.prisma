// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(uuid())
  email               String?             @unique
  phone               String?             @unique
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  identities          Identity[]
  verification_tokens VerificationToken[]
  media_subscriptions MediaSubscription[]

  @@index([email])
  @@index([phone])
  @@index([uuid])
  @@map("users")
}

model Identity {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(uuid())
  user_uuid           String
  provider            AuthProvider
  provider_id         String?
  access_token        String?
  refresh_token       String?
  expires_at          Int?
  password            String?
  verified            Boolean             @default(false)
  user                User                @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  verification_tokens VerificationToken[]
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt

  @@unique([provider, provider_id])
  @@index([provider_id])
  @@index([user_uuid])
  @@map("identities")
}

model VerificationToken {
  id            Int          @id @default(autoincrement())
  uuid          String       @unique @default(uuid())
  user_uuid     String?
  token         String
  state         String
  type          AuthProvider
  identity_uuid String?
  expires_at    DateTime?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  user          User?        @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  identity      Identity?    @relation(fields: [identity_uuid], references: [uuid])

  @@index([token])
  @@index([user_uuid])
  @@index([identity_uuid])
  @@map("verification_tokens")
}

model MediaSubscription {
  id                    Int          @id @default(autoincrement())
  uuid                  String       @unique @default(uuid())
  user_uuid             String
  platform_type         PlatformType
  account_identifier    String
  notifications_enabled Boolean      @default(true)
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  user                  User         @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)

  @@unique([user_uuid, platform_type, account_identifier], name: "unique_user_subscription")
  @@index([user_uuid])
  @@index([platform_type])
  @@map("media_subscriptions")
}

enum AuthProvider {
  email
  phone
  google
  facebook
  twitter
}

enum PlatformType {
  twitter
  youtube
  reddit
}
